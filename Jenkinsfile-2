pipeline {
    agent any

    environment {
        VERSION = "1.0.${BUILD_NUMBER}"
        PATH = "${PATH}:${getSonarPath()}:${getDockerPath()}"
    }

    stages {
        stage ('Sonarcube Scan') {
        steps {
         script {
          scannerHome = tool 'sonarqube'
        }
        withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]){
        withSonarQubeEnv('SonarQubeScanner') {
          sh " ${scannerHome}/bin/sonar-scanner \
          -Dsonar.projectKey=CliXX-App-Isaac   \
          -Dsonar.login=${SONAR_TOKEN} "
        }
        }
        }

}

 stage('Quality Gate') {
            steps {
                timeout(time: 3, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
            }
            }
        }

          stage ('Build Docker Image') {
          steps {
            // script{
            //  dockerHome= tool 'docker-inst'
            // }
            //  sh "${dockerHome}/bin/docker build . -t clixx-image:$VERSION "
            sh "docker build . -t clixx-image:$VERSION "
          }
        }

  stage ('Starting Docker Image') {
          steps {
              sh '''
              if ( docker ps|grep clixx-cont ) then
                 echo "Docker image exists, killing it"
                 docker stop clixx-cont
                 docker rm clixx-cont
                 docker run --name clixx-cont  -p 80:80 -d clixx-image:$VERSION
              else
                 docker run --name clixx-cont  -p 80:80 -d clixx-image:$VERSION 
              fi
              '''
          }
        }

  // stage ('Restore CliXX Database') {
  //         steps {
  //             sh '''
  //           python3 -m venv python3-virtualenv
  //           source python3-virtualenv/bin/activate
  //           python3 --version
  //           pip3 install boto3 botocore boto
  //           ansible-playbook $WORKSPACE/deploy_db_ansible/deploy_db.yml 
  //           deactivate

  //             '''
  //         }
  //       }

  stage ('Restore CliXX Database') {
          steps {
            withCredentials([string(credentialsId: 'access_key', variable: 'access_key'),string(credentialsId: 'secret_access_key', variable: 'secret_access_key')]){
              sh '''
            pip3 install boto3 botocore boto
            ansible-playbook -i localhost $WORKSPACE/deploy_db_ansible/deploy_db.yml --extra-vars "access_key=${access_key} secret_key=${secret_access_key}" 
              '''
          }
        }
   }

  // stage ('Configure DB Instance') {
  //         steps {
  //             withCredentials([string(credentialsId: 'DB_USER_NAME', variable: 'DB_USER_NAME'), string(credentialsId: 'DB_PASSWORD', variable: 'DB_PASSWORD'), string(credentialsId: 'DB_NAME', variable: 'DB_NAME'), string(credentialsId: 'SERVER_INSTANCE', variable: 'SERVER_INSTANCE')]){
  //             sh '''
  //              USERNAME=${DB_USER_NAME}
  //              PASSWORD=${DB_PASSWORD}
  //              DBNAME=${DB_NAME}
  //              SERVER_IP=$(curl -s http://checkip.dyndns.org | sed -e 's/.*Current IP Address: //' -e 's/<.*$//')
  //              SERVER_INSTANCE=${SERVER_INSTANCE}
  //              echo "use wordpressdb;" >> $WORKSPACE/db.setup
  //              echo "UPDATE wp_options SET option_value = '$SERVER_IP' WHERE option_value LIKE 'http%';">> $WORKSPACE/db.setup
  //              mysql -u $USERNAME --password=$PASSWORD -h $SERVER_INSTANCE  -D  $DBNAME < $WORKSPACE/db.setup

  //             '''
  //             }
  //         }
  //       }


  stage ('Configure DB Instance') {
          steps {
              withCredentials([string(credentialsId: 'DB_USER_NAME', variable: 'DB_USER_NAME'), string(credentialsId: 'DB_PASSWORD', variable: 'DB_PASSWORD'), string(credentialsId: 'DB_NAME', variable: 'DB_NAME')]){
              sh '''
               USERNAME='wordpressuser'
               PASSWORD='W3lcome123'
               DBNAME='wordpressdb'
               #SERVER_IP=$(curl -s http://checkip.dyndns.org | sed -e 's/.*Current IP Address: //' -e 's/<.*$//')
               TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` \
               SERVER_IP=`curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/public-ipv4`
               SERVER_INSTANCE='wordpressdbclixx-ecs.cz2gyeouqpg0.us-east-1.rds.amazonaws.com'
               echo "use wordpressdb;" > $WORKSPACE/db.setup
               #echo "UPDATE wp_options SET option_value = '$SERVER_IP' WHERE option_id='1';">> $WORKSPACE/db.setup
               echo "UPDATE wp_options SET option_value = '$SERVER_IP' WHERE option_value like '%NLB%';">> $WORKSPACE/db.setup
               mysql -u $USERNAME --password=$PASSWORD -h $SERVER_INSTANCE  -D  $DBNAME < $WORKSPACE/db.setup
               docker exec -d clixx-cont sed -i "s/'clixx-db.clw4oi62ww68.us-east-1.rds.amazonaws.com'/'${SERVER_INSTANCE}'/g" /var/www/html/wp-config.php
               #docker exec -d clixx-cont sed -i '172s/None/All/' /etc/apache2/apache2.conf  
               ##docker exec -d clixx-cont sed -i "8s/'/var/www/'/'/var/www/hmtl/'/" /etc/apache2/conf-available/docker-php.conf
               ##docker exec -d clixx-cont sed -i "9s/#ServerName www.example.com/ServerName 50.19.151.53/" /etc/apache2/sites-available/000-default.conf
               #docker exec -d clixx-cont sed -i '69s/#ServerRoot/ServerRoot/' /etc/apache2/apache2.conf
               #docker exec -d clixx-cont sed -i '199s/^$/ServerName 50.19.151.53/' /etc/apache2/apache2.conf
               ##docker exec -d clixx-cont sed -i '41s/#export/export/' /etc/apache2/envvars
               #docker exec -d clixx-cont sed -i '23s/apache2$SUFFIX//' /etc/apache2/envvars
               #docker exec -d clixx-cont sed -i '23s/var/etc/' /etc/apache2/envvars
               #docker exec -d clixx-cont sed -i '23s/run/apache2/' /etc/apache2/envvars
               ##docker exec -d clixx-cont source /etc/apache2/envvars
              '''
              //  SERVER_INSTANCE=${SERVER_INSTANCE}
              //  SERVER_INSTANCE='wordpressdbclixxjenkins.cd7numzl1xfe.us-east-1.rds.amazonaws.com'
              }
          }
        }

        stage ('Deployment Destination') {
        steps {
            script {
                def userInput = input(id: 'confirm', message: 'Image operates properly?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Tear Down Environment?', name: 'confirm'] ])
             }
             withCredentials([string(credentialsId: 'DEST_DB', variable: 'DEST_DB')]){
             sh '''
              docker exec -d clixx-cont sed -i "s/'wordpressdbclixx-ecs.cz2gyeouqpg0.us-east-1.rds.amazonaws.com'/'${DEST_DB}'/g" /var/www/html/wp-config.php
             '''
             }
        }
        }

        stage ('Change wp-config check') {
        steps {
            script {
                def userInput = input(id: 'confirm', message: 'wp-config was changed?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Tear Down Environment?', name: 'confirm'] ])
          }
      }
      }

      
      stage ('Tear Down CliXX Docker Image and Database') {
          steps {
             script {
                def userInput = input(id: 'confirm', message: 'Tear Down Environment?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Tear Down Environment?', name: 'confirm'] ])
             }
              sh '''
            python3 -m venv python3-virtualenv
            source python3-virtualenv/bin/activate
            python3 --version
            pip3 install boto3 botocore boto
            ansible-playbook $WORKSPACE/deploy_db_ansible/delete_db.yml
            deactivate
            docker stop clixx-cont
            docker rm  clixx-cont

              '''
          }
        }

        stage ('Log Into ECR and push the newly created Docker') {
          steps {
             script {
                def userInput = input(id: 'confirm', message: 'Push Image To ECR?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Push to ECR?', name: 'confirm'] ])
             }
              withCredentials([string(credentialsId: 'ECR_USERNAME', variable: 'ECR_USERNAME'), string(credentialsId: 'ECR_REPO', variable: 'ECR_REPO'), ]){
              sh '''
                aws ecr get-login-password --region us-east-1 | docker login --username ${ECR_USERNAME} --password-stdin ${ECR_REPO}
                docker tag clixx-image:$VERSION ${ECR_REPO}:clixx-image-$VERSION
                docker tag clixx-image:$VERSION ${ECR_REPO}:latest
                docker push ${ECR_REPO}:clixx-image-$VERSION
                docker push ${ECR_REPO}:latest
              '''
          }
          }
        }
    }
}

def getSonarPath(){
        def SonarHome= tool name: 'sonarqube', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
        return SonarHome
    }
def getDockerPath(){
        def DockerHome= tool name: 'docker-inst', type: 'dockerTool'
        return DockerHome
    }
    
// def getAnsiblePath(){
//         def AnsibleHome= tool name: 'ansible-inst', type: 'ansibleTool'
//         return AnsibleHome
//     }


 //  USERNAME=${DB_USER_NAME}
              //  PASSWORD=${DB_PASSWORD}
              //  DBNAME=${DB_NAME}
